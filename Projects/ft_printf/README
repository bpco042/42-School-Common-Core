# 🚧 ft_printf - Implementation Roadmap

This roadmap outlines step-by-step how to implement the `ft_printf` project according to the 42 School subject requirements.

---

## ✅ 1. Project Understanding

- [X] Carefully read the project subject.
- [X] Understand that the goal is to reimplement `printf()` with limited format support.
- [X] Identify the supported format specifiers: `%c`, `%s`, `%p`, `%d`, `%i`, `%u`, `%x`, `%X`, `%%`.
- [X] Learn about variadic functions: `va_start`, `va_arg`, `va_end`.

---

## 🛠️ 2. Initial Project Setup

- [x] Create necessary folders and files.
- [x] Add your `libft` (copied, not as a submodule).
- [x] Set up your initial `.c` and `.h` files.
- [x] Write a Makefile with all required rules.

---

## 📚 3. Study Variadic Functions

- [ ] Learn how `va_list`, `va_start`, `va_arg`, and `va_end` work.

---

## 🧩 4. Conversion Planning

- [ ] Create a plan to handle each format specifier:
  - `%c` → character
  - `%s` → string
  - `%p` → pointer
  - `%d` / `%i` → integers
  - `%u` → unsigned integer
  - `%x` / `%X` → hexadecimal
  - `%%` → percent sign

- [ ] Plan internal helper functions for each type.
- [ ] Decide how to route format types to their handlers in `ft_printf`.

---

## 🧪 5. Implement `ft_printf`

- [ ] Start with basic string parsing in the main function.
- [ ] Implement each conversion specifier, one at a time.
- [ ] Test after each new specifier is added.
- [ ] Keep track of the total number of characters printed.

---

## 🔍 6. Error Handling & Memory

- [ ] Ensure no crashes (e.g., segmentation faults).
- [ ] Handle null strings and null pointers gracefully.
- [ ] Use `valgrind` to check for memory leaks.
- [ ] Properly manage dynamically allocated memory (if used).

---

## 🧾 7. Makefile

- [ ] Include required rules: `NAME`, `all`, `clean`, `fclean`, `re`, `bonus`.
- [ ] Ensure `libft` compiles before `ft_printf`.
- [ ] Avoid unnecessary relinking.

---

## 📊 8. Testing

- [ ] Create test programs to compare output from `ft_printf` and the real `printf`.
- [ ] Test all supported format specifiers with basic and edge cases.
- [ ] Include tests for null and invalid arguments.
- [ ] Consider scripting or automating the testing process.

---

## 🌟 9. Bonus Part (Optional)

⚠️ Only start this part if the mandatory portion is **fully functional and correct**.

- [ ] Implement flags: `-`, `0`, `.`, and field width.
- [ ] Implement additional flags: `#`, `+`, and space.
- [ ] Adapt the main parser to support all flag combinations.

---

## 🚀 10. Final Checks & Submission

- [ ] Ensure Norm compliance (Norminette).
- [ ] Confirm that all required files are present and correctly named.
- [ ] Make sure your code compiles with `-Wall -Wextra -Werror` and produces no warnings.
- [ ] Verify that `libftprintf.a` is correctly created.
- [ ] Push everything to your assigned Git repository.



